{"version":3,"sources":["utils/setHead.jsx","components/common/InputButton.jsx","components/AuthUser.jsx","components/common/Input.jsx","components/NotesCol.jsx","components/UserSection.jsx","helper/helper.js","components/workspace.jsx","components/common/Logo.jsx","components/common/Divider.jsx","containers/Controller.jsx","App.js","serviceWorker.js","index.js","click.mp3"],"names":["PageHead","pageDescription","pageKeyWords","pageTitle","pageImageURL","Helmet","name","content","InputButton","StartIcon","label","rest","Button","variant","startIcon","AuthUser","username","handleOnLogout","useContext","FormContext","isLogin","Grid","container","spacing","xs","item","className","Chip","style","fontSize","icon","Face","color","clickable","justify","alignItems","Close","onClick","href","process","faGoogle","marginRight","Input","control","as","TextField","size","NotesCol","values","onSubmit","handleOnDelete","handleOnAdd","id","map","index","key","marginBottom","defaultValue","Delete","Fab","aria-label","Add","UserSection","lists","check","handleOnCheck","Typography","FormControlLabel","value","Checkbox","type","Save","form","Select","width","MenuItem","ImportExport","formatString","max","length","slice","WorkSpace","data","handleOnCopy","copyName","onCopy","text","background","wordBreak","Logo","to","src","height","objectFit","alt","Divider","display","backgroundColor","opacity","margin","React","createContext","Controller","useState","setUsername","setLogin","isNeedUpdate","setNeedUpdate","setLists","isCopyName","setCopyName","localStorage","getItem","local","JSON","parse","notes","useForm","defaultValues","getValues","handleSubmit","setValue","watcherNotes","watch","useFieldArray","append","remove","fields","useEffect","setItem","stringify","axios","get","then","listNote","msg","toast","success","handleOnImportNote","useCallback","note","selectNote","forEach","_","warn","handleOnDeleteNote","delete","catch","response","error","handleOnSubmitNotes","post","headers","Fragment","sm","md","lg","minHeight","padding","direction","Provider","Audio","clickSound","play","App","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","module","exports"],"mappings":"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","file":"static/js/main.0757e70e.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst PageHead = ({ pageDescription, pageKeyWords, pageTitle, pageImageURL }) => {\r\n        return (\r\n                <Helmet>\r\n                        {/* config head start */}\r\n                        <title>{`${pageTitle} | Notespicker`}</title>\r\n                        <meta name=\"description\" content={pageDescription} />\r\n                        <meta name=\"keywords\" content={pageKeyWords} />\r\n                        {/* config head end  */}\r\n\r\n                        {/* config facebook start */}\r\n                        <meta name=\"og:tittle\" content={pageTitle} />\r\n                        <meta name=\"og:description\" content={pageDescription} />\r\n                        <meta name=\"og:type\" content=\"article\" />\r\n                        <meta name=\"og:image\" content={pageImageURL} />\r\n                        {/* config facebook end  */}\r\n\r\n                        {/* config google start  */}\r\n                        {/* config google end */}\r\n\r\n                        {/* config twitter start  */}\r\n                        <meta name=\"twitter:title\" content={pageTitle} />\r\n                        <meta name=\"twitter:description\" content={pageDescription} />\r\n                        <meta name=\"twitter:image\" content={pageImageURL} />\r\n                        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n                        <meta name=\"twitter:site\" content=\"@website-username\" />\r\n                        {/* config twitter end */}\r\n                </Helmet>\r\n        );\r\n};\r\n\r\nexport default PageHead;\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst InputButton = ({ StartIcon, label, ...rest }) => {\r\n        return (\r\n                <Button {...rest} variant=\"contained\" startIcon={StartIcon}>\r\n                        {label}\r\n                </Button>\r\n        );\r\n};\r\n\r\nexport default InputButton;\r\n","import React, { useContext } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGoogle } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { Grid, Chip } from \"@material-ui/core\";\r\nimport { Close, Face as FaceIcon } from \"@material-ui/icons\";\r\nimport InputButton from \"../components/common/InputButton\";\r\n\r\nimport { FormContext } from \"../containers/Controller\";\r\n\r\nconst AuthUser = ({ username, handleOnLogout }) => {\r\n        const { isLogin } = useContext(FormContext);\r\n\r\n        if (!isLogin)\r\n                return (\r\n                        <Grid container>\r\n                                <a className=\"google google__btn\" href={`${process.env.REACT_APP_SERVER_URL}/api/user/auth/google`}>\r\n                                        <FontAwesomeIcon icon={faGoogle} style={{ marginRight: \"8px\" }} />\r\n                                        <span>Login with Google+</span>\r\n                                </a>\r\n                        </Grid>\r\n                );\r\n\r\n        return (\r\n                <Grid container spacing={1}>\r\n                        <Grid xs={8} item className=\"flex-center\">\r\n                                <Chip\r\n                                        className=\"max-dimension\"\r\n                                        style={{ fontSize: \"14px\" }}\r\n                                        icon={<FaceIcon />}\r\n                                        label={username}\r\n                                        color=\"primary\"\r\n                                        clickable\r\n                                />\r\n                        </Grid>\r\n                        <Grid xs={4} item container justify=\"center\" alignItems=\"center\">\r\n                                <InputButton StartIcon={<Close />} color=\"secondary\" onClick={handleOnLogout} label=\"Logout\" />\r\n                        </Grid>\r\n                </Grid>\r\n        );\r\n};\r\n\r\nexport default AuthUser;\r\n","import React, { useContext } from \"react\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { FormContext } from \"../../containers/Controller\";\r\n\r\nconst Input = ({ label, ...rest }) => {\r\n        const { control } = useContext(FormContext);\r\n\r\n        return (\r\n                <Controller\r\n                        control={control}\r\n                        {...rest}\r\n                        as={<TextField variant=\"standard\" label={label} size=\"small\" className=\"max-dimension\" />}\r\n                />\r\n        );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport { Delete, Add as AddIcon } from \"@material-ui/icons\";\r\nimport { Grid, Fab } from \"@material-ui/core\";\r\n\r\nimport InputButton from \"./common/InputButton\";\r\n\r\nimport Input from \"./common/Input\";\r\n\r\nconst NotesCol = ({ values = [], onSubmit, handleOnDelete, handleOnAdd }) => {\r\n        return (\r\n                <form id=\"myform\" onSubmit={onSubmit}>\r\n                        <Grid container>\r\n                                {values.map((item, index) => {\r\n                                        return (\r\n                                                <Grid key={item.id} container spacing={1} style={{ marginBottom: \"8px\" }}>\r\n                                                        <Grid item xs={3}>\r\n                                                                <Input name={`notes[${index}].name`} defaultValue=\"\" label={`Note ${index + 1}`} />\r\n                                                        </Grid>\r\n                                                        <Grid item xs={5}>\r\n                                                                <Input name={`notes[${index}].data`} defaultValue=\"\" label={`Data ${index + 1}`} />\r\n                                                        </Grid>\r\n                                                        <Grid item xs={4} container alignItems=\"center\" justify=\"center\">\r\n                                                                <InputButton\r\n                                                                        onClick={() => handleOnDelete(index)}\r\n                                                                        StartIcon={<Delete />}\r\n                                                                        color=\"secondary\"\r\n                                                                        label=\"Delete\"\r\n                                                                />\r\n                                                        </Grid>\r\n                                                </Grid>\r\n                                        );\r\n                                })}\r\n                                <Grid container justify=\"center\">\r\n                                        <Fab color=\"primary\" aria-label=\"add\" size=\"small\" onClick={handleOnAdd}>\r\n                                                <AddIcon />\r\n                                        </Fab>\r\n                                </Grid>\r\n                        </Grid>\r\n                </form>\r\n        );\r\n};\r\n\r\nexport default NotesCol;\r\n","import React, { useContext } from \"react\";\r\nimport { MenuItem, Select, Typography, Grid, FormControlLabel, Checkbox } from \"@material-ui/core\";\r\nimport { Save, ImportExport, Delete } from \"@material-ui/icons\";\r\nimport { Controller } from \"react-hook-form\";\r\n\r\nimport { FormContext } from \"../containers/Controller\";\r\nimport InputButton from \"./common/InputButton\";\r\nimport Input from \"./common/Input\";\r\n\r\nconst UserSection = ({ lists = [], onSubmit, handleOnDelete, check, handleOnCheck }) => {\r\n        const { control, isLogin } = useContext(FormContext);\r\n\r\n        return (\r\n                <Grid container spacing={1}>\r\n                        <Grid container item alignItems=\"center\" justify=\"space-between\">\r\n                                <Typography variant=\"h5\">Menu</Typography>\r\n                                <FormControlLabel\r\n                                        value={check}\r\n                                        onClick={handleOnCheck}\r\n                                        control={<Checkbox name=\"copyName\" color=\"primary\" />}\r\n                                        label=\"Copy Name or Data\"\r\n                                />\r\n                        </Grid>\r\n                        <Grid container item spacing={1} alignItems=\"center\" justify=\"center\">\r\n                                <Grid item xs={8}>\r\n                                        <Input name=\"name\" defaultValue=\"\" label=\"Note Name\" />\r\n                                </Grid>\r\n                                <Grid item xs={4} container justify=\"center\">\r\n                                        <InputButton type=\"submit\" StartIcon={<Save />} form=\"myform\" color=\"primary\" label=\"Save\" />\r\n                                </Grid>\r\n                        </Grid>\r\n                        {isLogin && (\r\n                                <Grid container item justify=\"center\" alignItems=\"center\" spacing={1}>\r\n                                        <Grid item xs={4}>\r\n                                                <form id=\"user-form\" onSubmit={onSubmit}>\r\n                                                        <Controller\r\n                                                                name=\"selectNote\"\r\n                                                                control={control}\r\n                                                                defaultValue=\"default\"\r\n                                                                as={\r\n                                                                        <Select style={{ width: \"100%\" }}>\r\n                                                                                <MenuItem value=\"default\">Select Your Note</MenuItem>\r\n                                                                                {lists !== null &&\r\n                                                                                        lists.map((item, index) => {\r\n                                                                                                return (\r\n                                                                                                        <MenuItem value={index} key={index}>\r\n                                                                                                                {item.name}\r\n                                                                                                        </MenuItem>\r\n                                                                                                );\r\n                                                                                        })}\r\n                                                                        </Select>\r\n                                                                }\r\n                                                        />\r\n                                                </form>\r\n                                        </Grid>\r\n                                        <Grid item xs={4} container justify=\"center\">\r\n                                                <InputButton\r\n                                                        color=\"primary\"\r\n                                                        StartIcon={<ImportExport />}\r\n                                                        type=\"submit\"\r\n                                                        form=\"user-form\"\r\n                                                        label=\"Import\"\r\n                                                />\r\n                                        </Grid>\r\n                                        <Grid item xs={4} container justify=\"center\">\r\n                                                <InputButton\r\n                                                        color=\"secondary\"\r\n                                                        StartIcon={<Delete />}\r\n                                                        type=\"button\"\r\n                                                        form=\"user-form\"\r\n                                                        label=\"Delete\"\r\n                                                        onClick={handleOnDelete}\r\n                                                />\r\n                                        </Grid>\r\n                                </Grid>\r\n                        )}\r\n                </Grid>\r\n        );\r\n};\r\n\r\nexport default UserSection;\r\n","export const formatString = (value = \"\", max) => {\r\n        if (value.length > max) return value.slice(0, max) + \"...\";\r\n        return value;\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button, Typography } from \"@material-ui/core\";\r\nimport CopyToClipBoard from \"react-copy-to-clipboard\";\r\n\r\nimport { formatString } from \"../helper/helper\";\r\n\r\nconst WorkSpace = ({ data = [], handleOnCopy, copyName }) => {\r\n        return (\r\n                <Grid container item className=\"workspace__container\">\r\n                        {data.map((item, index) => {\r\n                                return (\r\n                                        <CopyToClipBoard onCopy={handleOnCopy} key={index} text={copyName ? item.name : item.data}>\r\n                                                <Button\r\n                                                        className=\"workspace__btn\"\r\n                                                        variant=\"contained\"\r\n                                                        color=\"primary\"\r\n                                                        style={{ background: `${item.data}` }}\r\n                                                >\r\n                                                        <Typography variant=\"h6\">{formatString(item.name, 15)}</Typography>\r\n                                                        <Typography variant=\"body2\" style={{ wordBreak: \"break-all\" }}>\r\n                                                                {formatString(item.data, 50)}\r\n                                                        </Typography>\r\n                                                </Button>\r\n                                        </CopyToClipBoard>\r\n                                );\r\n                        })}\r\n                </Grid>\r\n        );\r\n};\r\n\r\nexport default WorkSpace;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Logo = () => {\r\n        return (\r\n                <Link to=\"/home\" className=\"m-b-2\">\r\n                        <img\r\n                                src={process.env.PUBLIC_URL + \"/asset/image/logo.svg\"}\r\n                                style={{ height: \"64px\", objectFit: \"cover\" }}\r\n                                alt=\"Notes Picker\"\r\n                        />\r\n                </Link>\r\n        );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\n\r\nconst Divider = () => {\r\n        return (\r\n                <span\r\n                        style={{\r\n                                display: \"block\",\r\n                                height: \"2px\",\r\n                                backgroundColor: \"#2c3e50\",\r\n                                width: \"100%\",\r\n                                opacity: \"0.8\",\r\n                                margin: \"16px 0\",\r\n                        }}\r\n                ></span>\r\n        );\r\n};\r\n\r\nexport default Divider;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { toast } from \"react-toastify\";\r\nimport axios from \"axios\";\r\n\r\nimport AuthUser from \"../components/AuthUser\";\r\nimport NotesCol from \"../components/NotesCol\";\r\nimport UserSection from \"../components/UserSection\";\r\nimport WorkSpace from \"../components/workspace\";\r\n\r\nimport Logo from \"../components/common/Logo\";\r\nimport Divider from \"../components/common/Divider\";\r\nimport clickSound from \"../click.mp3\";\r\n\r\nconst FormContext = React.createContext();\r\n\r\nconst Controller = () => {\r\n        const [username, setUsername] = useState(null);\r\n        const [isLogin, setLogin] = useState(false);\r\n\r\n        const [isNeedUpdate, setNeedUpdate] = useState(false);\r\n        const [lists, setLists] = useState([]);\r\n        const [isCopyName, setCopyName] = useState(false);\r\n        const [local] = useState(localStorage.getItem(\"notes\"));\r\n\r\n        const [notes] = useState(local !== \"undefined\" ? JSON.parse(local) : [{ name: \"\", data: \"\" }]);\r\n        const { control, getValues, handleSubmit, setValue, watch } = useForm({\r\n                defaultValues: {\r\n                        notes: notes,\r\n                        copyName: false,\r\n                },\r\n        });\r\n\r\n        const watcherNotes = watch(\"notes\");\r\n\r\n        const { append, remove, fields } = useFieldArray({\r\n                name: \"notes\",\r\n                control,\r\n        });\r\n\r\n        useEffect(() => {\r\n                setValue(\"notes\", local !== \"undefined\" ? JSON.parse(local) : [{ name: \"\", data: \"\" }]);\r\n        }, [setValue, local]);\r\n\r\n        useEffect(() => {\r\n                if (!isNeedUpdate) {\r\n                        localStorage.setItem(\"notes\", JSON.stringify(getValues().notes));\r\n                }\r\n        }, [getValues, watcherNotes, isNeedUpdate]);\r\n\r\n        useEffect(() => {\r\n                axios.get(\"/api/user/getRecords\").then(({ data: { data: listNote } }) => {\r\n                        setLists(listNote);\r\n                });\r\n                axios.get(\"/api/user/me\").then(({ data: { data: name, msg } }) => {\r\n                        if (name) {\r\n                                toast.success(msg);\r\n                                setUsername(name);\r\n                                setLogin(true);\r\n                        }\r\n                });\r\n        }, [setValue]);\r\n\r\n        const handleOnImportNote = useCallback(\r\n                ({ selectNote: note }) => {\r\n                        if (note === \"default\") {\r\n                                toast.warn(\"Please select your note\");\r\n                                return;\r\n                        }\r\n\r\n                        if (lists[note].data) {\r\n                                setNeedUpdate(true);\r\n                                toast.success(\"Importing successes\");\r\n                                remove();\r\n                                lists[note].data.forEach((_) => {\r\n                                        append();\r\n                                });\r\n                                setNeedUpdate(false);\r\n\r\n                                append();\r\n                                setValue(\"name\", lists[note].name);\r\n                                setValue(\"notes\", lists[note].data);\r\n                        } else {\r\n                                setValue(\"name\", lists[note].name);\r\n                                toast.success(\"Importing empty\");\r\n                        }\r\n                },\r\n                [append, lists, remove, setValue]\r\n        );\r\n\r\n        const handleOnDeleteNote = useCallback(() => {\r\n                const current = getValues(\"selectNote\");\r\n\r\n                if (current === \"default\") {\r\n                        toast.warn(\"Please select your note\");\r\n                        return;\r\n                }\r\n\r\n                axios.delete(`/api/user/deleteNote/${getValues().selectNote}`)\r\n                        .then(({ data: { msg } }) => {\r\n                                toast.success(msg);\r\n\r\n                                axios.get(\"/api/user/getRecords\").then(({ data: { data: listNote } }) => {\r\n                                        setLists(listNote);\r\n                                });\r\n                        })\r\n                        .catch(({ response: { data: { msg = \"\" } } }) => toast.error(msg));\r\n        }, [getValues]);\r\n\r\n        const handleOnSubmitNotes = useCallback(({ name, notes }) => {\r\n                axios.post(\r\n                        \"/api/user/addNewNote\",\r\n                        { name: name, data: notes },\r\n                        {\r\n                                headers: {\r\n                                        \"Content-Type\": \"application/json\",\r\n                                },\r\n                        }\r\n                )\r\n                        .then(({ data: { msg } }) => {\r\n                                toast.success(msg);\r\n                                axios.get(\"/api/user/getRecords\").then(({ data: { data: listNote } }) => {\r\n                                        setLists(listNote);\r\n                                });\r\n                        })\r\n                        .catch(({ response: { data: { msg = \"\" } } }) => toast.error(msg));\r\n        }, []);\r\n\r\n        const handleOnLogout = () => {\r\n                axios.post(\"/api/user/logout\").then(({ data: { msg } }) => {\r\n                        toast.success(msg);\r\n                        setLogin(false);\r\n                });\r\n        };\r\n\r\n        const handleOnCopy = () => {\r\n                const sound = new Audio(clickSound);\r\n                sound.play();\r\n        };\r\n\r\n        return (\r\n                <React.Fragment>\r\n                        <Grid container className=\"container\">\r\n                                <Grid\r\n                                        container\r\n                                        item\r\n                                        xs={12}\r\n                                        sm={6}\r\n                                        md={4}\r\n                                        lg={3}\r\n                                        style={{\r\n                                                minHeight: \"100%\",\r\n                                                background: \"#fefefe\",\r\n                                                padding: \"16px 24px\",\r\n                                        }}\r\n                                        alignItems=\"center\"\r\n                                        direction=\"column\"\r\n                                >\r\n                                        <Logo />\r\n\r\n                                        <FormContext.Provider value={{ control: control, isLogin: isLogin }}>\r\n                                                <AuthUser handleOnLogout={handleOnLogout} username={username} />\r\n                                                <Divider />\r\n\r\n                                                <UserSection\r\n                                                        lists={lists}\r\n                                                        onSubmit={handleSubmit(handleOnImportNote)}\r\n                                                        handleOnDelete={handleOnDeleteNote}\r\n                                                        check={isCopyName}\r\n                                                        handleOnCheck={() => setCopyName(!isCopyName)}\r\n                                                />\r\n                                                <Divider />\r\n\r\n                                                <NotesCol\r\n                                                        values={fields}\r\n                                                        onSubmit={handleSubmit(handleOnSubmitNotes)}\r\n                                                        handleOnDelete={(index) => {\r\n                                                                toast.success(\"Deleted Note\");\r\n                                                                remove(index);\r\n                                                        }}\r\n                                                        handleOnAdd={() => {\r\n                                                                toast.success(\"Added Note\");\r\n                                                                append();\r\n                                                        }}\r\n                                                />\r\n                                        </FormContext.Provider>\r\n                                </Grid>\r\n                                <Grid container xs={12} sm={6} md={8} lg={9} item>\r\n                                        <WorkSpace data={getValues().notes} handleOnCopy={handleOnCopy} copyName={isCopyName} />\r\n                                </Grid>\r\n                        </Grid>\r\n                </React.Fragment>\r\n        );\r\n};\r\n\r\nexport { FormContext };\r\nexport default Controller;\r\n","import React from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./App.css\";\r\n\r\nimport PageHead from \"./utils/setHead\";\r\nimport Controller from \"./containers/Controller\";\r\n\r\nfunction App() {\r\n        return (\r\n                <React.Fragment>\r\n                        <PageHead\r\n                                pageTitle=\"Home\"\r\n                                pageDescription=\"A small tool for picking up your notes or palettes quickly and easily, Notespicker can handle multiple notes and remainders at the same time.\"\r\n                                pageKeyWords=\"picker, note, colors, notespicker, palette, remainder, notes\"\r\n                                pageImageURL=\"/asset/image/banner.png\"\r\n                        />\r\n                        <ToastContainer\r\n                                position=\"top-right\"\r\n                                autoClose={4000}\r\n                                hideProgressBar={false}\r\n                                newestOnTop={false}\r\n                                closeOnClick\r\n                                rtl={false}\r\n                                pauseOnFocusLoss\r\n                                draggable\r\n                                pauseOnHover\r\n                        />\r\n                        <Controller />\r\n                </React.Fragment>\r\n        );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n        <BrowserRouter>\r\n                <App />\r\n        </BrowserRouter>,\r\n        document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/click.627c0e8b.mp3\";"],"sourceRoot":""}